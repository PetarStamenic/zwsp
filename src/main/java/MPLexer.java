// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/stame/Desktop/Projects/Java/Prevodioci/src/main/java/spec.flex


import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class MPLexer implements Scanner{

  public static final int YYEOF = -1;

  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0, 0
  };

  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\167\0\1\1\u0185\0\1\2\1\3\1\4"+
    "\1\5\1\6\30\0\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\101\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\41\3\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\7\0\16\0\25\0\34\0\43\0\52\0\61"+
    "\0\70\0\77\0\106\0\115\0\124\0\133\0\142\0\151"+
    "\0\160\0\167\0\176\0\205\0\214\0\223\0\232\0\241"+
    "\0\250\0\257\0\266\0\275\0\304\0\313\0\322\0\331"+
    "\0\340\0\347\0\356\0\365\0\374\0\u0103\0\u010a\0\u0111"+
    "\0\u0118\0\u011f\0\u0126\0\u012d\0\u0134\0\u013b\0\u0142\0\u0149"+
    "\0\u0150\0\u0157\0\u015e\0\u0165\0\u016c\0\u0173\0\u017a\0\u0181"+
    "\0\u0188\0\u018f\0\u0196\0\u019d\0\u01a4\0\u01ab\0\u01b2\0\u01b9"+
    "\0\u01c0\0\u01c7\0\u01ce\0\u01d5\0\u01dc\0\u01e3\0\u01ea\0\7"+
    "\0\7\0\7\0\7\0\7\0\7\0\7\0\7\0\7"+
    "\0\7\0\7\0\7\0\7\0\7\0\7\0\7\0\7"+
    "\0\7\0\7\0\7\0\7\0\7\0\7\0\7\0\7"+
    "\0\7\0\7\0\7\0\7\0\7\0\u01f1\0\u01f8\0\u01ff"+
    "\0\34\0\u0206\0\u020d\0\u020d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\0\1\3\1\4\1\5\2\2\14\0\2\6"+
    "\5\0\1\7\6\0\2\10\3\0\1\11\1\0\2\6"+
    "\5\0\1\12\1\13\5\0\2\14\5\0\1\15\6\0"+
    "\1\16\1\17\5\0\1\20\6\0\2\21\5\0\1\22"+
    "\6\0\1\23\1\24\5\0\1\25\1\26\5\0\1\27"+
    "\6\0\2\30\5\0\1\31\6\0\1\32\1\33\5\0"+
    "\1\34\1\35\5\0\1\36\1\37\6\0\1\40\5\0"+
    "\1\41\6\0\2\42\6\0\1\43\5\0\1\44\7\0"+
    "\1\45\5\0\1\46\1\47\5\0\1\50\1\51\5\0"+
    "\1\52\1\53\6\0\1\54\5\0\1\55\1\56\5\0"+
    "\1\57\1\60\5\0\2\61\6\0\1\62\6\0\1\63"+
    "\5\0\1\64\1\65\5\0\1\66\1\67\5\0\1\70"+
    "\1\71\5\0\1\72\6\0\1\73\1\74\5\0\1\75"+
    "\6\0\1\76\6\0\1\77\1\100\5\0\1\101\1\102"+
    "\6\0\1\103\5\0\1\104\6\0\1\105\6\0\2\106"+
    "\5\0\1\107\6\0\1\110\1\111\6\0\1\112\5\0"+
    "\1\113\1\114\5\0\1\115\1\116\5\0\1\117\1\120"+
    "\5\0\1\121\1\122\5\0\1\123\1\124\5\0\1\125"+
    "\1\126\6\0\1\127\5\0\1\130\6\0\1\131\1\132"+
    "\5\0\1\133\1\134\5\0\1\135\7\0\1\136\6\0"+
    "\1\137\5\0\1\140\1\141\6\0\1\142\5\0\1\143"+
    "\1\144\5\0\1\145\6\0\2\146\5\0\2\147\2\0"+
    "\1\150\1\0\1\151\7\0\1\152\3\0\1\150\1\0"+
    "\1\151\2\150\2\0\1\153\11\0\2\154";

  private static int [] zzUnpackTrans() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\101\0\36\11\1\1\1\0\1\1"+
    "\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  private java.io.Reader zzReader;
  private int zzState;
  private int zzLexicalState = YYINITIAL;
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  private int zzMarkedPos;
  private int zzCurrentPos;
  private int zzStartRead;

  private int zzEndRead;

  private boolean zzAtEOF;
  private int zzFinalHighSurrogate = 0;

  private int yyline;

  private int yycolumn;

  @SuppressWarnings("unused")
  private long yychar;

  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
public int getLine()
{
return yyline;
}

  MPLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }

  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  public final boolean yyatEOF() {
    return zzAtEOF;
  }

  public final int yystate() {
    return zzLexicalState;
  }

  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }

  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }

  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }

  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (yytext() != null && yytext().length() > 0) System.out.println( "ERROR: Error u liniji 1");
            }
            // fall through
          case 35: break;
          case 2:
            { return new Symbol(sym.NATURAL);
            }
            // fall through
          case 36: break;
          case 3:
            { return new Symbol( sym.MAIN);
            }
            // fall through
          case 37: break;
          case 4:
            { return new Symbol( sym.INT);
            }
            // fall through
          case 38: break;
          case 5:
            { return new Symbol( sym.PLUS);
            }
            // fall through
          case 39: break;
          case 6:
            { return new Symbol( sym.MINUS);
            }
            // fall through
          case 40: break;
          case 7:
            { return new Symbol( sym.MUL);
            }
            // fall through
          case 41: break;
          case 8:
            { return new Symbol( sym.DIV);
            }
            // fall through
          case 42: break;
          case 9:
            { return new Symbol( sym.LESS);
            }
            // fall through
          case 43: break;
          case 10:
            { return new Symbol( sym.GREAT);
            }
            // fall through
          case 44: break;
          case 11:
            { return new Symbol( sym.LESSE);
            }
            // fall through
          case 45: break;
          case 12:
            { return new Symbol( sym.GREATE);
            }
            // fall through
          case 46: break;
          case 13:
            { return new Symbol( sym.EQ);
            }
            // fall through
          case 47: break;
          case 14:
            { return new Symbol( sym.NEQ);
            }
            // fall through
          case 48: break;
          case 15:
            { return new Symbol( sym.ASSIGN);
            }
            // fall through
          case 49: break;
          case 16:
            { return new Symbol( sym.COMMA);
            }
            // fall through
          case 50: break;
          case 17:
            { return new Symbol( sym.DOTCOMMA);
            }
            // fall through
          case 51: break;
          case 18:
            { return new Symbol( sym.IF);
            }
            // fall through
          case 52: break;
          case 19:
            { return new Symbol( sym.WHILE);
            }
            // fall through
          case 53: break;
          case 20:
            { return new Symbol( sym.SOBRACKET);
            }
            // fall through
          case 54: break;
          case 21:
            { return new Symbol( sym.SCBRACKET);
            }
            // fall through
          case 55: break;
          case 22:
            { return new Symbol( sym.LOBRACKET);
            }
            // fall through
          case 56: break;
          case 23:
            { return new Symbol( sym.LCBRACKET);
            }
            // fall through
          case 57: break;
          case 24:
            { return new Symbol( sym.PROGRAM);
            }
            // fall through
          case 58: break;
          case 25:
            { return new Symbol( sym.ELSE);
            }
            // fall through
          case 59: break;
          case 26:
            { return new Symbol( sym.LONG);
            }
            // fall through
          case 60: break;
          case 27:
            { return new Symbol( sym.DOUBLE);
            }
            // fall through
          case 61: break;
          case 28:
            { return new Symbol( sym.FLOAT);
            }
            // fall through
          case 62: break;
          case 29:
            { return new Symbol( sym.PRIVATE);
            }
            // fall through
          case 63: break;
          case 30:
            { return new Symbol( sym.PROTECTED);
            }
            // fall through
          case 64: break;
          case 31:
            { return new Symbol( sym.PUBLIC);
            }
            // fall through
          case 65: break;
          case 32:
            { return new Symbol( sym.STATIC);
            }
            // fall through
          case 66: break;
          case 33:
            { return new Symbol(sym.ID);
            }
            // fall through
          case 67: break;
          case 34:
            { return new Symbol(sym.REAL);
            }
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
