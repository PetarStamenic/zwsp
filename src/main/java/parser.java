
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;
import java_cup.runtime.XMLElement;

@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  @Deprecated
  public parser() {super();}

  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\003\013\000\002\002\004\000\002\003" +
    "\013\000\002\003\012\000\002\003\011\000\002\003\010" +
    "\000\002\003\007\000\002\003\006\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\006\002\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\002\003\000" +
    "\002\024\002\000\002\025\002\000\002\002\007\000\002" +
    "\010\006\000\002\010\006\000\002\010\005\000\002\007" +
    "\004\000\002\007\003\000\002\017\003\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\012\006\000\002\012\006\000\002\012\005" +
    "\000\002\012\004\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\022\011\000\002\022\011\000\002\022\007" +
    "\000\002\022\007\000\002\026\002\000\002\022\012\000" +
    "\002\022\004\000\002\023\007\000\002\023\007\000\002" +
    "\023\006\000\002\023\005\000\002\023\004\000\002\013" +
    "\004\000\002\013\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003" });

  public short[][] production_table() {return _production_table;}

  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\005\004\006\001\002\000\004\002" +
    "\166\001\002\000\004\002\ufff7\001\002\000\006\003\010" +
    "\005\007\001\002\000\006\003\011\006\012\001\002\000" +
    "\004\002\ufff8\001\002\000\004\002\ufff9\001\002\000\020" +
    "\003\017\010\020\011\013\012\015\013\014\015\ufff0\016" +
    "\ufff0\001\002\000\010\013\ufff5\015\ufff5\016\ufff5\001\002" +
    "\000\006\015\ufff1\016\ufff1\001\002\000\010\013\ufff4\015" +
    "\ufff4\016\ufff4\001\002\000\006\003\045\025\046\001\002" +
    "\000\004\002\ufffa\001\002\000\010\013\ufff6\015\ufff6\016" +
    "\ufff6\001\002\000\022\003\uffe4\010\020\011\013\012\015" +
    "\013\014\015\ufff0\016\ufff0\025\uffe4\001\002\000\006\015" +
    "\027\016\026\001\002\000\010\013\024\015\ufff2\016\ufff2" +
    "\001\002\000\006\015\ufff3\016\ufff3\001\002\000\006\003" +
    "\035\005\034\001\002\000\004\017\uffeb\001\002\000\006" +
    "\003\uffec\005\uffec\001\002\000\004\017\031\001\002\000" +
    "\004\020\uffea\001\002\000\004\020\033\001\002\000\006" +
    "\003\uffe9\005\uffe9\001\002\000\010\003\uffed\014\uffed\021" +
    "\uffed\001\002\000\022\003\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\015\uffe6\016\uffe6\025\uffe6\001\002\000\010\003" +
    "\040\014\037\021\041\001\002\000\006\003\043\005\042" +
    "\001\002\000\022\003\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\015\uffe7\016\uffe7\025\uffe7\001\002\000\022\003\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\025" +
    "\uffe8\001\002\000\010\003\uffef\014\uffef\021\uffef\001\002" +
    "\000\010\003\uffee\014\uffee\021\uffee\001\002\000\006\003" +
    "\uffe5\025\uffe5\001\002\000\004\002\ufffb\001\002\000\006" +
    "\003\047\026\050\001\002\000\004\002\ufffc\001\002\000" +
    "\006\003\051\027\052\001\002\000\004\002\ufffd\001\002" +
    "\000\006\003\054\006\055\001\002\000\006\003\164\007" +
    "\165\001\002\000\004\002\ufffe\001\002\000\014\003\066" +
    "\005\065\006\055\042\063\044\056\001\002\000\006\003" +
    "\154\026\155\001\002\000\016\003\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\042\uffbd\044\uffbd\001\002\000\016\003\153\005" +
    "\065\006\055\007\151\042\063\044\056\001\002\000\016" +
    "\003\uffb6\005\uffb6\006\uffb6\007\uffb6\042\uffb6\044\uffb6\001" +
    "\002\000\016\003\uffb9\005\uffb9\006\uffb9\007\uffb9\042\uffb9" +
    "\044\uffb9\001\002\000\006\003\120\026\121\001\002\000" +
    "\016\003\uffb7\005\uffb7\006\uffb7\007\uffb7\042\uffb7\044\uffb7" +
    "\001\002\000\006\003\070\024\071\001\002\000\020\003" +
    "\uffba\005\uffba\006\uffba\007\uffba\042\uffba\043\uffba\044\uffba" +
    "\001\002\000\016\003\uffb8\005\uffb8\006\uffb8\007\uffb8\042" +
    "\uffb8\044\uffb8\001\002\000\016\003\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\042\uffd4\044\uffd4\001\002\000\014\003\074\005" +
    "\072\022\101\023\075\026\076\001\002\000\034\003\uffe3" +
    "\021\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002" +
    "\000\034\003\uffdd\021\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\001\002\000\016\003\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\042\uffd5\044\uffd5\001\002\000\034\003\uffe1\021\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\001\002\000\012" +
    "\005\072\022\101\023\075\026\076\001\002\000\034\003" +
    "\uffd8\021\uffd8\027\uffd8\030\uffd8\031\110\032\111\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001" +
    "\002\000\012\003\102\021\103\030\104\033\105\001\002" +
    "\000\034\003\uffe0\021\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\001\002\000\016\003\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\042\uffd6\044\uffd6\001\002\000\016\003\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\042\uffd7\044\uffd7\001\002\000\014\003" +
    "\114\005\072\022\101\023\075\026\076\001\002\000\014" +
    "\003\106\005\072\022\101\023\075\026\076\001\002\000" +
    "\030\003\uffd9\021\uffd9\027\uffd9\030\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000" +
    "\034\003\uffda\021\uffda\027\uffda\030\uffda\031\110\032\111" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\001\002\000\012\005\072\022\101\023\075\026\076" +
    "\001\002\000\012\005\072\022\101\023\075\026\076\001" +
    "\002\000\034\003\uffde\021\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\001\002\000\034\003\uffdf\021\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\030\003\uffdb" +
    "\021\uffdb\027\uffdb\030\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\034\003\uffdc" +
    "\021\uffdc\027\uffdc\030\uffdc\031\110\032\111\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\010\027\117\030\104\033\105\001\002\000\034\003" +
    "\uffe2\021\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001" +
    "\002\000\016\003\uffc4\005\uffc4\006\uffc4\007\uffc4\042\uffc4" +
    "\044\uffc4\001\002\000\012\005\072\022\101\023\075\026" +
    "\076\001\002\000\006\003\136\027\137\001\002\000\024" +
    "\003\133\030\104\033\105\034\132\035\124\036\131\037" +
    "\126\040\130\041\127\001\002\000\014\003\uffd3\005\uffd3" +
    "\022\uffd3\023\uffd3\026\uffd3\001\002\000\014\003\134\005" +
    "\072\022\101\023\075\026\076\001\002\000\014\003\uffd1" +
    "\005\uffd1\022\uffd1\023\uffd1\026\uffd1\001\002\000\014\003" +
    "\uffce\005\uffce\022\uffce\023\uffce\026\uffce\001\002\000\014" +
    "\003\uffcf\005\uffcf\022\uffcf\023\uffcf\026\uffcf\001\002\000" +
    "\014\003\uffd0\005\uffd0\022\uffd0\023\uffd0\026\uffd0\001\002" +
    "\000\014\003\uffd2\005\uffd2\022\uffd2\023\uffd2\026\uffd2\001" +
    "\002\000\006\003\uffcb\027\uffcb\001\002\000\006\003\uffcc" +
    "\027\uffcc\001\002\000\012\003\uffcd\027\uffcd\030\104\033" +
    "\105\001\002\000\004\042\uffc6\001\002\000\006\003\141" +
    "\006\055\001\002\000\020\003\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\042\uffc8\043\142\044\uffc8\001\002\000\016\003\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\042\uffc7\044\uffc7\001\002\000" +
    "\006\003\144\006\055\001\002\000\016\003\uffca\005\uffca" +
    "\006\uffca\007\uffca\042\uffca\044\uffca\001\002\000\016\003" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\042\uffc9\044\uffc9\001\002" +
    "\000\004\042\146\001\002\000\004\026\147\001\002\000" +
    "\004\003\150\001\002\000\016\003\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\042\uffc5\044\uffc5\001\002\000\020\003\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\042\uffbc\043\uffbc\044\uffbc\001\002" +
    "\000\016\003\uffbe\005\uffbe\006\uffbe\007\uffbe\042\uffbe\044" +
    "\uffbe\001\002\000\020\003\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\001\002\000\016\003\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\042\uffbf\044\uffbf\001\002\000\014" +
    "\003\156\005\072\022\101\023\075\026\076\001\002\000" +
    "\016\003\uffc0\005\uffc0\006\uffc0\007\uffc0\042\uffc0\044\uffc0" +
    "\001\002\000\006\003\160\027\161\001\002\000\016\003" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\042\uffc1\044\uffc1\001\002" +
    "\000\006\003\163\006\055\001\002\000\016\003\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\042\uffc3\044\uffc3\001\002\000\016" +
    "\003\uffc2\005\uffc2\006\uffc2\007\uffc2\042\uffc2\044\uffc2\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002" });
  public short[][] action_table() {return _action_table;}

  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\022\006\021\007" +
    "\015\010\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\022\006\021\007\043\010\020" +
    "\001\001\000\004\002\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\035\001\001\000\004\024\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\066\012\061\013\057\014\056" +
    "\022\063\023\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\066\012\061\014\151\022\063\023\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\077\016" +
    "\076\017\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\115\016" +
    "\076\017\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\114\017\072\001\001\000\006\016\106\017\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\112\001\001\000\004\017\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\122\016\076\017\072\020\121\001\001\000\002\001" +
    "\001\000\004\021\124\001\001\000\002\001\001\000\010" +
    "\015\134\016\076\017\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\144\001\001\000\004\004\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\122\016\076\017\072\020\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  public short[][] reduce_table() {return _reduce_table;}

  protected CUP$parser$actions action_obj;

  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  public int start_state() {return 0;}
  public int start_production() {return 1;}

  public int EOF_sym() {return 0;}

  public int error_sym() {return 1;}

  public void user_init() throws java.lang.Exception
    {

symbolTable = new SymbolTable();

    }


    SymbolTable symbolTable;

    public static void main(String[] args){
    try{
    FileReader fileReader = new FileReader (args[0]);
    java_cup.runtime.Scanner scanner = new MPLexer(fileReader);
    parser MPParser = new parser(scanner);
    MPParser.parse();
    System.out.println("Opa nema gresaka");
    }catch (Exception e){ e.printStackTrace(); }

    }

    public void report_error(Symbol cur_token){
    System.out.println("Error in line 1");
    }

    public int getLine(){
    return 1;
    }

@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih MAIN SOBRACKET SCBRACKET Blok LCBRACKET 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 1");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type start_val = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih MAIN SOBRACKET SCBRACKET Blok error 
            {
              Type RESULT =null;
		
                System.out.println("OI fali zatvorena velika zagrada");
					   	 System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih MAIN SOBRACKET SCBRACKET error 
            {
              Type RESULT =null;
		
                System.out.println("Izvni a sta hoces da radi bez bloka naredbi jel");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih MAIN SOBRACKET error 
            {
              Type RESULT =null;
		
                System.out.println("zatvori je zivota ti");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih MAIN error 
            {
              Type RESULT =null;
		
                System.out.println("jesi razmisljao na temu da otvoris zagradu posle main");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= PROGRAM ID LOBRACKET DodelaPromenljivih error 
            {
              Type RESULT =null;
		
               System.out.println("A gde ti je Main metoda !?!??!");
             			System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= PROGRAM ID LOBRACKET error 
            {
              Type RESULT =null;
		
               System.out.println("a kud pises kod bez i jedne promenljive majke ti");
              			System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= PROGRAM ID error 
            {
              Type RESULT =null;
		
                System.out.println("otvori veliku zagradu ...");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= PROGRAM error 
            {
              Type RESULT =null;
		
                System.out.println("Sta bezimeni program jel");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Program ::= error 
            {
              Type RESULT =null;
		
                System.out.println("pa ni da pocnes kako treba");
					   	 System.exit(1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Modifier ::= PRIVATE 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 3");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Modifier ::= PUBLIC 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 4");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Modifier ::= PROTECTED 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 5");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StaticModifier ::= Modifier STATIC 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 6");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;


          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StaticModifier ::= Modifier 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 7");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StaticModifier ::= STATIC 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 8");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StaticModifier ::= 
            {
              Type RESULT =null;
		System.out.println("NISTA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StaticModifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ids COMMA ID 
            {
              ArrayList RESULT =null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList niz = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = niz;
                RESULT.add( ime );
                System.out.println("BEGONE 9");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ids ::= ids COMMA error 
            {
              Type RESULT =null;
		
                System.out.println("il ti fali nesto posle zareza il ti je zarez visak aj cao");
                System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ids ::= ID 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 10");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tip ::= INT 
            {
              Type RESULT =null;
		
RESULT = parser.symbolTable.getType("int");
                System.out.println("BEGONE 11");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tip",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Type RESULT =null;

RESULT = parser.symbolTable.getType("float");
                System.out.println("BEGONE 12");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

RESULT = parser.symbolTable.getType("double");
                System.out.println("BEGONE 13");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tip ::= FLOAT NT$0 DOUBLE NT$1 LONG 
            {
              Type RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
RESULT = parser.symbolTable.getType("long");
                System.out.println("BEGONE 14");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tip",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeklaracijaPromenljive ::= StaticModifier Tip ids DOTCOMMA 
            {
              ArrayList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList niz = (ArrayList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		            if(niz != null)
					for ( int i=0; i<niz.size(); i++ ) {
					String ime = (String) niz.get(i);
					   if ( ! parser.symbolTable.addVar( ime, t ) ) {
					   	 System.out.println( "Greska u liniji 1Promenljiva je vec deklarisana." );
					   	 System.exit(1);
					   }
					}
                System.out.println("BEGONE 15");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklaracijaPromenljive",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeklaracijaPromenljive ::= StaticModifier Tip ids error 
            {
              Type RESULT =null;
		System.out.println("ajde dodaj tacku zarez pa da idem kuci");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklaracijaPromenljive",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeklaracijaPromenljive ::= StaticModifier Tip error 
            {
              Type RESULT =null;
		System.out.println("izvini a sta oces da deklarises");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeklaracijaPromenljive",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DodelaPromenljivih ::= DeklaracijaPromenljive DodelaPromenljivih 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 16");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaPromenljivih",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DodelaPromenljivih ::= DeklaracijaPromenljive 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 17");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaPromenljivih",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FIzraz ::= ID 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 20");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FIzraz ::= SOBRACKET Izraz SCBRACKET 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 21");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FIzraz ::= REAL 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 22");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FIzraz ::= NATURAL 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 23");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIzraz",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PIzraz ::= PIzraz MUL FIzraz 
            {
              Type RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( i1.tkind != i2.tkind )
              {
              	System.out.println("nisu istog tipa adios");
              	System.exit(1);
              }
              RESULT = parser.symbolTable.getType(String.valueOf(i1.tkind));

                System.out.println("BEGONE 24");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PIzraz ::= PIzraz DIV FIzraz 
            {
              Type RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( i1.tkind != i2.tkind )
                          {
                          	System.out.println("nisu istog tipa adios");
                          	System.exit(1);
                          }
                          RESULT = parser.symbolTable.getType(String.valueOf(i1.tkind));

                System.out.println("BEGONE 25");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PIzraz ::= FIzraz 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = i;
                System.out.println("BEGONE 26");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIzraz",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Izraz ::= Izraz PLUS PIzraz 
            {
              Type RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
              if (i1 != null) {
                if (i1.tkind != i2.tkind) {
                  System.out.println("nisu istog tipa adios");
                  System.exit(1);
                }
              } else {
                System.out.println("nisu istog tipa adios");
                System.exit(1);
              }
              RESULT = parser.symbolTable.getType(String.valueOf(i1.tkind));

                System.out.println("BEGONE 27");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Izraz ::= Izraz PLUS error 
            {
              Type RESULT =null;
		 System.out.println("plus sta?!?!?");System.exit(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Izraz ::= Izraz MINUS PIzraz 
            {
              Type RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if ( i1.tkind != i2.tkind )
                          {
                          	System.out.println("nisu istog tipa adios");
                          	System.exit(1);
                          }
                          RESULT = parser.symbolTable.getType(String.valueOf(i1.tkind));

                System.out.println("BEGONE 28");

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Izraz ::= Izraz MINUS error 
            {
              Type RESULT =null;
		 System.out.println("minus sta?!?!?");System.exit(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Izraz ::= PIzraz 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = i;
                System.out.println("BEGONE 29");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izraz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DodelaVrednosti ::= ID ASSIGN Izraz DOTCOMMA 
            {
              Type RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                System.out.println("BEGONE 30");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaVrednosti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DodelaVrednosti ::= ID ASSIGN Izraz error 
            {
              Type RESULT =null;
		System.out.println("Nesto mi govori da ti fali tacka zarez na kraju \n to nesto je parser");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaVrednosti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DodelaVrednosti ::= ID ASSIGN error 
            {
              Type RESULT =null;
		System.out.println("nesto mi govori da ti fali izraz dobar");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaVrednosti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DodelaVrednosti ::= ID error 
            {
              Type RESULT =null;
		System.out.println("sta radimo sa ovom promenljivnom");System.exit(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DodelaVrednosti",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LogickiOperator ::= GREAT 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 31");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LogickiOperator ::= LESS 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 32");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LogickiOperator ::= GREATE 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 33");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LogickiOperator ::= LESSE 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 34");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LogickiOperator ::= EQ 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 35");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LogickiOperator ::= NEQ 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 36");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiOperator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LogickiIzraz ::= Izraz LogickiOperator Izraz 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 41");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LogickiIzraz ::= Izraz LogickiOperator error 
            {
              Type RESULT =null;
		System.out.println("i sa cime ga poredimo");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LogickiIzraz ::= Izraz error 
            {
              Type RESULT =null;
		System.out.println("sta s tim");System.exit(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogickiIzraz",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IfBlok ::= IF SOBRACKET LogickiIzraz SCBRACKET Blok ELSE Blok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 43");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfBlok ::= IF SOBRACKET LogickiIzraz SCBRACKET Blok ELSE error 
            {
              Type RESULT =null;
		
                System.out.println("a nesto posle else");
                System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IfBlok ::= IF SOBRACKET LogickiIzraz SCBRACKET Blok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 44");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfBlok ::= IF SOBRACKET LogickiIzraz SCBRACKET error 
            {
              Type RESULT =null;
		
               System.out.println("a neki blok nesto");
               System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Type RESULT =null;

               System.out.println("otvori bre zagradu");
               System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfBlok ::= IF SOBRACKET LogickiIzraz error NT$2 IF SOBRACKET error 
            {
              Type RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
               System.out.println("daj bre neki logicki izraz bar");
               System.exit(1);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfBlok ::= IF error 
            {
              Type RESULT =null;
		
               System.out.println("if pa sta");
               System.exit(1);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfBlok",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileBlok ::= WHILE SOBRACKET LogickiIzraz SCBRACKET Blok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 45");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileBlok",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WhileBlok ::= WHILE SOBRACKET LogickiIzraz SCBRACKET error 
            {
              Type RESULT =null;
		System.out.println("nisam ni zeleo blok unutar while");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileBlok",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileBlok ::= WHILE SOBRACKET LogickiIzraz error 
            {
              Type RESULT =null;
		System.out.println("a da otvoris zagradi");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileBlok",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileBlok ::= WHILE SOBRACKET error 
            {
              Type RESULT =null;
		System.out.println("Nije ko da treba da zadas neki izraz logicki");System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileBlok",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WhileBlok ::= WHILE error 
            {
              Type RESULT =null;
		System.out.println("While pa posle sta");System.exit(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileBlok",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NizNar ::= NizNar Naredba 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 47");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizNar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NizNar ::= Naredba 
            {
              Type RESULT =null;
		
            System.out.println("Zabrojao sam se");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NizNar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Blok ::= LOBRACKET NizNar LCBRACKET 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 46");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Blok ::= LOBRACKET NizNar error 
            {
              Type RESULT =null;
		
            System.out.println("aj zatvori tu zagradu");
            System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Blok ::= LOBRACKET error 
            {
              Type RESULT =null;
		
            System.out.println("a naredbe?");
            System.exit(1);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blok",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Naredba ::= DodelaVrednosti 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 48");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Naredba ::= Blok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 49");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Naredba ::= IfBlok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 50");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Naredba ::= WhileBlok 
            {
              Type RESULT =null;
		
                System.out.println("BEGONE 51");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Naredba",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
